name: Deployment Notification

on:
    deployment_status:

jobs:
    notify:
        runs-on: ubuntu-latest
        if: github.event.deployment_status.state == 'success'
        permissions:
            contents: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.deployment.ref }}
                  fetch-depth: 0

            - name: Calculate version
              id: version
              run: |
                  COMMIT_COUNT=$(git rev-list --count HEAD)
                  VERSION="1.0.$COMMIT_COUNT"
                  UPDATE_DATE=$(date +%Y-%m-%d)
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "update_date=$UPDATE_DATE" >> $GITHUB_OUTPUT
                  echo "Calculated version: $VERSION"

            - name: Create Release (only for production)
              id: create_release
              if: github.event.deployment.environment == 'production'
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  TAG="v${{ steps.version.outputs.version }}"

                  if gh release view "$TAG" >/dev/null 2>&1; then
                    echo "Release $TAG already exists, skipping creation"
                    RELEASE_URL=$(gh release view "$TAG" --json url -q .url)
                  else
                    RELEASE_URL=$(gh release create "$TAG" \
                      --title "Release v${{ steps.version.outputs.version }}" \
                      --notes "Automated deployment from commit ${{ github.sha }}

                  Environment: ${{ github.event.deployment.environment }}" \
                      --latest | grep -o 'https://github.com[^"]*')
                  fi

                  echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT

            - name: Wait for deployment to be ready
              run: sleep 10

            - name: Verify deployment is actually working
              id: verify
              run: |
                  if [ "${{ github.event.deployment.environment }}" = "production" ]; then
                    URL="https://flights.vim55k.workers.dev/"
                  else
                    URL="https://flights-dev.vim55k.workers.dev/"
                  fi

                  echo "Checking deployment at: $URL"
                  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo "000")
                  echo "Deployment health check HTTP status: $HTTP_STATUS"

                  if [ "$HTTP_STATUS" != "200" ]; then
                    echo "❌ Deployment health check failed (HTTP $HTTP_STATUS)"
                    exit 1
                  else
                    echo "✅ Deployment health check passed"
                  fi

            - name: Call deploy webhook
              run: |
                  if [ "${{ github.event.deployment.environment }}" = "production" ]; then
                    DEPLOY_URL="https://flights.vim55k.workers.dev/deploy-webhook"
                    RELEASE_URL="${{ steps.create_release.outputs.release_url }}"
                  else
                    DEPLOY_URL="https://flights-dev.vim55k.workers.dev/deploy-webhook"
                    RELEASE_URL=""
                  fi

                  echo "Calling webhook: $DEPLOY_URL"

                  curl -X POST "$DEPLOY_URL" \
                    -H "Content-Type: application/json" \
                    -d "{\"version\":\"${{ steps.version.outputs.version }}\",\"update_date\":\"${{ steps.version.outputs.update_date }}\",\"release_url\":\"$RELEASE_URL\"}" \
                    -w "\nHTTP Status: %{http_code}\n"
